"""
Memory management middleware for Django
"""
import gc
import psutil
import os
from django.utils.deprecation import MiddlewareMixin

class MemoryManagementMiddleware(MiddlewareMixin):
    """
    Middleware ƒë·ªÉ qu·∫£n l√Ω memory v√† cleanup sau m·ªói request
    """
    
    def process_response(self, request, response):
        """Cleanup memory sau m·ªói response"""
        try:
            # Force garbage collection
            gc.collect()
            
            # Log memory usage (ch·ªâ trong development)
            if os.getenv('DEBUG', 'False').lower() == 'true':
                memory_info = psutil.Process().memory_info()
                memory_mb = memory_info.rss / 1024 / 1024
                print(f"üß† Memory usage after request: {memory_mb:.2f} MB")
                
                # Warning n·∫øu memory usage qu√° cao
                if memory_mb > 400:  # 400MB threshold
                    print(f"‚ö†Ô∏è High memory usage detected: {memory_mb:.2f} MB")
                    
        except Exception as e:
            print(f"‚ö†Ô∏è Memory management error: {e}")
            
        return response